name: JUDO Community Documentation

on:
  push:
    branches: [ develop ]

  workflow_dispatch:

jobs:
  build:
    runs-on: judong
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Project context
        id: context
        uses: zero88/gh-project-context@v1.1

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
          gpg-private-key: ${{ secrets.GPG_SECRET_KEYS }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Calculate version number
        id: version
        run: |-
          TAG_NAME=$(echo "${{ steps.context.outputs.branch }}" | cut -d ' ' -f2 | tr '#\/\.-' '_')
          BASE_VERSION=$(./mvnw org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dtycho.mode=maven -DskipModules=true -Dexpression=project.version -q -DforceStdout | cut -d'-' -f 1)
          VERSION_NUMBER=${BASE_VERSION}.$(date +%Y%m%d_%H%M%S)_${{ steps.context.outputs.shortCommitId }}_${TAG_NAME//[(\)]}
          echo "Base version from POM: $BASE_VERSION"
          echo "Building version: ${VERSION_NUMBER}"
          echo "::set-output name=version::${VERSION_NUMBER}"

      - name: Remove settings.xml
        run: rm $HOME/.m2/settings.xml || true

      - name: Setup maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v20
        with:
          servers: >
            [
                {
                    "id": "judong-nexus-mirror",
                    "username": "${{ secrets.JUDONG_NEXUS_USERNAME }}",
                    "password": "${{ secrets.JUDONG_NEXUS_PASSWORD }}"
                },
                {
                    "id": "judong-nexus-distribution",
                    "username": "${{ secrets.JUDONG_NEXUS_USERNAME }}",
                    "password": "${{ secrets.JUDONG_NEXUS_PASSWORD }}"
                }
            ]
          mirrors: >
            [
                {
                    "id": "judong-nexus-mirror",
                    "mirrorOf": "*",
                    "url": "https://nexus.judo.technology/repository/maven-judong/"
                 }
            ]

      - name: Build with Maven
        run: |-
          ./mvnw -B -Dstyle.color=always \
          -Dclone \
          -Drevision=${{ steps.version.outputs.version }} \
          clean install

#      - name: Disable robots and crawlers
#        run: ./de-robot.sh

      - name: Auth
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.JUDO_DOCUMENTATION_GCP }}

      - name: Upload
        uses: google-github-actions/upload-cloud-storage@v0.4.0
        with:
          path: build/
          parent: false
          destination: judo-community-documentation

      - name: set mainfile in bucket
        run: |-
          echo "${{ secrets.JUDO_DOCUMENTATION_GCP_JSON }}" > /tmp/gcp-token.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-token.json
          gsutil web set -m index.html gs://judo-community-documentation

      - name: Tag commit
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.version.outputs.version }}

      - name: Create message
        id: message
        if: ${{ always() }}
        run: |-
          if [ "${{ job.status }}" == "success" ]; then
            message=":white_check_mark: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            message="${message} Version: ${{ steps.version.outputs.version }}"
          fi
          if [ "${{ job.status }}" == "failure" ]; then
            message=":x: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"    
          fi
          if [ "${{ job.status }}" == "canceled" ]; then
            message=":x: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"    
          fi
          echo "::set-output name=message::${message}"

      - name: Send message to discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.JUDONG_DISCORD_WEBHOOK }}
          title: "Gitub action"
          description: "${{ steps.message.outputs.message }}"
